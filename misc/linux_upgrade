#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function

import serial
from copy import copy
import sys
import math
from pprint import pprint
from time import sleep, time
import traceback
import optparse

PROMPT =  'U-Boot> '

class MySerial(serial.Serial):

    def __init__(self, cfg):
        serial.Serial.__init__(self, cfg['serial_device'],cfg['baud'])
        self.CONFIG = cfg

    def command(self, text, success='', prompt=PROMPT, echo=1):
        '''Sends commands over the serial line, then waits for 'prompt'.
           text is formatted using this objects CONFIG.
        '''
        ser = self
        commands = text % self.CONFIG
        # avoids empty last lines, as
        # U-boot interprets empty line as repeat last command
        commands = commands.strip()+'\n'
        # transmit 1-by-1
        for c in commands:
            ser.write(c)
            if echo:
              recv = ser.read(1)
              sys.stdout.write(recv)
            else:
              sys.stdout.write(c)
            sys.stdout.flush()
        r = ''
        
        r+=self.readuntil(success)
        if prompt:
          r+=self.readuntil(prompt)
        return r

    def readuntil(self, ute):
        ret = ''
        while not ret.endswith(ute):
            c = self.read(1)
            ret += c
            sys.stdout.write(c)
            sys.stdout.flush()
        return ret


GUESS = object()

DEFAULTS_ROOTFS = {
      'serial_device' : '/dev/ttyUSB0',
      'baud' : 115200,
#      'serverip' : '84.89.244.31', # ip of storage01
      'serverip' : '84.89.255.161', # ip of tftp server
      'gatewayip' : GUESS,
      'netmask' : '255.255.255.0',
      'filename' : 'rootfs',
      'ipaddr' : None,
      'erase' : '1:20-33',
      'target' : '10110000'
}

DEFAULTS_KERNEL = copy(DEFAULTS_ROOTFS)
DEFAULTS_KERNEL.update({
  'erase' : '1:5-19',
  'target' : '10020000',
  'filename' : 'uImage'
})

IMAGE = {
    'rootfs' : DEFAULTS_ROOTFS,
    'kernel' : DEFAULTS_KERNEL
}

def setup(ser):
  w = ser.command
  w('echo')
  w('set ipaddr %(ipaddr)s')
  w('set netmask %(netmask)s')
  w('set gatewayip %(gatewayip)s')
  w('set serverip %(serverip)s')
  w('ping %(serverip)s', 'alive')


def update_image(ser):
  CONFIG = ser.CONFIG
  pprint(ser.CONFIG)
  w = ser.command
  # clean RAM area for image download
  w('mw.b 21000000 0 e0000')
  r = w('tftp 21000000 %(filename)s')
  eq = r.split('\n')[-2].partition(' = ')[2]
  nbyte = int(eq.split(' ')[0])
  nword = (nbyte+1)/2
  nlong_f = nbyte / 4.0
  nlong = int(math.ceil(nlong_f))
  print('\n#byte', nbyte)
  print('#word', nword, hex(nword))
  print('#long', nlong_f, nlong, hex(nlong))
  CONFIG['nbyte'] = nbyte
  CONFIG['nword'] = nword
  CONFIG['nlong'] = nlong
  # reprograms flash memory  
  w('erase %(erase)s')
  w('cp.l 21000000 %(target)s %(nlong)X', 'done')
  # checks wether write succeeded  
  w('cmp.l 21000000 %(target)s %(nlong)X', 'the same')
#  w('cp.w 21000000 %(target)s %(nword)X', 'done')
#  w('cmp.w 21000000 %(target)s %(nword)X', 'the same')

def update_boot(ser):
  w = ser.command
  w('setenv ramdisk_flash cp.w %(target)s 21100000 %(nword)X')
  w('setenv bootargs initrd\=0x21100000,%(nbyte)d console\=ttyS0,115200')
  w('setenv serverip')
  w('setenv ipaddr')
  w('setenv bootcmd run start_from_flash')
  w('saveenv', 'Protected')

def boot(ser):
  w = ser.command
  w('boot', 'BusyBox', prompt='# ')
  w('cat /etc/ROOTFS_VERSION', prompt='#')
  w('route', prompt='#')

def configure(DEFAULT):
  CONFIG = copy(DEFAULT)

  if len(sys.argv) > 1:
      ipaddr = sys.argv[1]
      CONFIG['ipaddr'] = ipaddr
  else:
      raise Exception('first argument must be ipaddr to use')

  DUMP_FILE = 'bruker-update-%s-%s.txt' % (ipaddr, time())

  if CONFIG['gatewayip'] is GUESS:
      CONFIG['gatewayip'] = ipaddr.rpartition('.')[0]+'.254'

  return CONFIG

def grab(ser):
    ser.write('reboot\n')
    print('waiting for U-Boot...')
    ser.readuntil('stop autoboot:')
    ser.write('\n')
    ser.readuntil(PROMPT)

if __name__=="__main__":
  OP = optparse.OptionParser()
  OP.add_option('--image', '-i', action='store', default='rootfs')
  opts,args = OP.parse_args(sys.argv)
  CONFIG = configure(DEFAULTS_ROOTFS)
  ser = MySerial(CONFIG)
  try:
    grab(ser)
    start_t = time()
    setup(ser)
#    update_image(ser, DEFAULTS_KERNEL)
    update_image(ser)
    update_boot(ser)
    boot(ser)
    end_t = time()
    print('\nfinished successfully after %fs' % (end_t - start_t))

  except KeyboardInterrupt:
    print('interrupting...')
    ser.command('\003', '<INTERRUPT>')
    raise

  except Exception:
    traceback.print_exc()
